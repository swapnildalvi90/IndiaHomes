//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IndiaHomesDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class IndiaHomesEntities : DbContext
    {
        public IndiaHomesEntities()
            : base("name=IndiaHomesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<Amenity> Amenities { get; set; }
        public DbSet<AppException> AppExceptions { get; set; }
        public DbSet<Availibility> Availibilities { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<DBException> DBExceptions { get; set; }
        public DbSet<Hotel> Hotels { get; set; }
        public DbSet<HotelAmenity> HotelAmenities { get; set; }
        public DbSet<HotelRoom> HotelRooms { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<PromoCode> PromoCodes { get; set; }
    
        public virtual int InsertHotelRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertHotelRooms");
        }
    
        public virtual int InsertIntoAdress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoAdress");
        }
    
        public virtual int spCancelBooking(Nullable<long> orderId, string status, string firstName, string lastName, string sessId, ObjectParameter errorMessage)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCancelBooking", orderIdParameter, statusParameter, firstNameParameter, lastNameParameter, sessIdParameter, errorMessage);
        }
    
        public virtual int spCreateAccount(string firstname, string lastname, string username, string password, string emailid, string sessId)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailidParameter = emailid != null ?
                new ObjectParameter("emailid", emailid) :
                new ObjectParameter("emailid", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateAccount", firstnameParameter, lastnameParameter, usernameParameter, passwordParameter, emailidParameter, sessIdParameter);
        }
    
        public virtual int spCreateOrder(string bookingNumber, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutDate, Nullable<decimal> cost, Nullable<decimal> discount, string status, Nullable<int> hotelId, Nullable<int> roomId, string username, string firstName, string lastName, string mobileNumber, string emailId, string sessId)
        {
            var bookingNumberParameter = bookingNumber != null ?
                new ObjectParameter("bookingNumber", bookingNumber) :
                new ObjectParameter("bookingNumber", typeof(string));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("checkInDate", checkInDate) :
                new ObjectParameter("checkInDate", typeof(System.DateTime));
    
            var checkOutDateParameter = checkOutDate.HasValue ?
                new ObjectParameter("checkOutDate", checkOutDate) :
                new ObjectParameter("checkOutDate", typeof(System.DateTime));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("discount", discount) :
                new ObjectParameter("discount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("hotelId", hotelId) :
                new ObjectParameter("hotelId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("mobileNumber", mobileNumber) :
                new ObjectParameter("mobileNumber", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateOrder", bookingNumberParameter, checkInDateParameter, checkOutDateParameter, costParameter, discountParameter, statusParameter, hotelIdParameter, roomIdParameter, usernameParameter, firstNameParameter, lastNameParameter, mobileNumberParameter, emailIdParameter, sessIdParameter);
        }
    
        public virtual int spDBException(string sessionId, string sourceProcedure, string lineNo, string message, string errorNo)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(string));
    
            var sourceProcedureParameter = sourceProcedure != null ?
                new ObjectParameter("sourceProcedure", sourceProcedure) :
                new ObjectParameter("sourceProcedure", typeof(string));
    
            var lineNoParameter = lineNo != null ?
                new ObjectParameter("lineNo", lineNo) :
                new ObjectParameter("lineNo", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var errorNoParameter = errorNo != null ?
                new ObjectParameter("errorNo", errorNo) :
                new ObjectParameter("errorNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDBException", sessionIdParameter, sourceProcedureParameter, lineNoParameter, messageParameter, errorNoParameter);
        }
    
        public virtual ObjectResult<spGetHotelRooms_Result> spGetHotelRooms(Nullable<int> hotelId, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutDate, string sessId)
        {
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("hotelId", hotelId) :
                new ObjectParameter("hotelId", typeof(int));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("checkInDate", checkInDate) :
                new ObjectParameter("checkInDate", typeof(System.DateTime));
    
            var checkOutDateParameter = checkOutDate.HasValue ?
                new ObjectParameter("checkOutDate", checkOutDate) :
                new ObjectParameter("checkOutDate", typeof(System.DateTime));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHotelRooms_Result>("spGetHotelRooms", hotelIdParameter, checkInDateParameter, checkOutDateParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<spGetHotels_Result> spGetHotels(Nullable<decimal> latitude, Nullable<decimal> longitude, string hotelName, Nullable<int> starRating, string sessId)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(decimal));
    
            var hotelNameParameter = hotelName != null ?
                new ObjectParameter("hotelName", hotelName) :
                new ObjectParameter("hotelName", typeof(string));
    
            var starRatingParameter = starRating.HasValue ?
                new ObjectParameter("starRating", starRating) :
                new ObjectParameter("starRating", typeof(int));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHotels_Result>("spGetHotels", latitudeParameter, longitudeParameter, hotelNameParameter, starRatingParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<spGetOrder_Result> spGetOrder(string firstName, string lastName, string orderId, string sessId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrder_Result>("spGetOrder", firstNameParameter, lastNameParameter, orderIdParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<spGetOrders_Result> spGetOrders(string username, string sessId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrders_Result>("spGetOrders", usernameParameter, sessIdParameter);
        }
    
        public virtual ObjectResult<spGetUserAccount_Result> spGetUserAccount(string enteredUsername, string enteredPassword, string sessId, ObjectParameter errorMessage)
        {
            var enteredUsernameParameter = enteredUsername != null ?
                new ObjectParameter("enteredUsername", enteredUsername) :
                new ObjectParameter("enteredUsername", typeof(string));
    
            var enteredPasswordParameter = enteredPassword != null ?
                new ObjectParameter("enteredPassword", enteredPassword) :
                new ObjectParameter("enteredPassword", typeof(string));
    
            var sessIdParameter = sessId != null ?
                new ObjectParameter("sessId", sessId) :
                new ObjectParameter("sessId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserAccount_Result>("spGetUserAccount", enteredUsernameParameter, enteredPasswordParameter, sessIdParameter, errorMessage);
        }
    
        public virtual int spLogAppException(string sessionId, string exception, Nullable<System.DateTime> timeStamp, string message, string description, string innerException, string stackTrace)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var innerExceptionParameter = innerException != null ?
                new ObjectParameter("innerException", innerException) :
                new ObjectParameter("innerException", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("stackTrace", stackTrace) :
                new ObjectParameter("stackTrace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLogAppException", sessionIdParameter, exceptionParameter, timeStampParameter, messageParameter, descriptionParameter, innerExceptionParameter, stackTraceParameter);
        }
    }
}
